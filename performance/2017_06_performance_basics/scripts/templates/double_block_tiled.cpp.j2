{% extends "base.cpp.j2" %}

{# block-tiled implementation with configurable variables and block size #}

{% block mmm_loop %}
const int block_size = {{ block_size }};
const int second_block_size = {{ second_block_size }};

// Outer loop, optimised for RAM access.
for (int {{ var1 }} = 0; {{ var1 }} < N; {{ var1 }} += block_size) {
    for (int {{ var2 }} = 0; {{ var2 }} < N; {{ var2 }} += block_size) {
        for (int {{ var3 }} = 0; {{ var3 }} < N; {{ var3 }} += block_size) {

            // CPU Cache optimisation
            for (int ii = {{ var1 }}; ii < ({{ var1 }} + block_size); ii += second_block_size) {
                for (int kk = {{ var2 }}; kk < ({{ var2 }} + block_size); kk += second_block_size) {
                    for (int jj = {{ var3 }}; jj < ({{ var3 }} + block_size); jj += second_block_size) {

                        // CPU Register optimisation
                        for (int kkk=kk; kkk < (kk + second_block_size); kkk++) {
                            for (int jjj=jj; jjj < (jj + second_block_size); jjj++) {
                                for (int iii=ii; iii < (ii + second_block_size); iii++) {
                                    C[iii][jjj] += A[iii][kkk] * B[kkk][jjj];
                                }
                            }
                        }
                    }
                }
            }
        }
    }
}
{% endblock %}
